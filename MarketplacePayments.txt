// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.4;

/**
 * @dev Interface of the BEP20 standard.
 */
interface IBEP20 {
    /**
     * @dev Returns the amount of tokens in existence.
     */
    function totalSupply() external view returns (uint256);

    /**
     * @dev Returns the amount of tokens owned by `account`.
     */
    function balanceOf(address account) external view returns (uint256);

    /**
     * @dev Moves `amount` tokens from the caller's account to `recipient`.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transfer(address recipient, uint256 amount) external returns (bool);

    /**
     * @dev Returns the remaining number of tokens that `spender` will be
     * allowed to spend on behalf of `owner` through {transferFrom}. This is
     * zero by default.
     *
     * This value changes when {approve} or {transferFrom} are called.
     */
    function allowance(address owner, address spender) external view returns (uint256);

    /**
     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * IMPORTANT: Beware that changing an allowance with this method brings the risk
     * that someone may use both the old and the new allowance by unfortunate
     * transaction ordering. One possible solution to mitigate this race
     * condition is to first reduce the spender's allowance to 0 and set the
     * desired value afterwards:
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
     *
     * Emits an {Approval} event.
     */
    function approve(address spender, uint256 amount) external returns (bool);

    /**
     * @dev Moves `amount` tokens from `sender` to `recipient` using the
     * allowance mechanism. `amount` is then deducted from the caller's
     * allowance.
     *
     * Returns a boolean value indicating whether the operation succeeded.
     *
     * Emits a {Transfer} event.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    /**
     * @dev Emitted when `value` tokens are moved from one account (`from`) to
     * another (`to`).
     *
     * Note that `value` may be zero.
     */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /**
     * @dev Emitted when the allowance of a `spender` for an `owner` is set by
     * a call to {approve}. `value` is the new allowance.
     */
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

/*
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _setOwner(_msgSender());
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


contract MarketplacePayments is Ownable{
     
    enum State { Pending, Completed, Released, Reverted }
      
    struct Order {
        uint256 orderId;
        address buyer;
        address seller;
        uint256 dueDate;
        address paymentToken;
        uint256 amount;
        uint256 fee;
        State state;
        uint256 createdAt;
        uint256 completedAt;
        uint256 releasedAt;
     }
    
    uint256 private totalOrders=0;

    mapping(uint256 => Order) orders;
    mapping(address => bool) allowedTokens;

    uint256 fee = 20;

    modifier condition(bool _condition, string memory message) {
        require(_condition, message);
        _;
    }

    event OrderCreated(
        uint256 orderId
  );

    event OrderCompleted(uint256 orderId,address indexed caller);
    event OrderReverted(uint256 orderId,address indexed caller);
    event OrderCompletedAndReleased(uint256 orderId,address indexed caller);


    function isTokenAllowed(address _tokenAddress) 
        public view
        returns(bool)
    {
          return allowedTokens[_tokenAddress];  
    }

    function updateTokensList(address _tokenAddress, bool allowed) 
        public 
        onlyOwner 
        returns(bool)
    {
          allowedTokens[_tokenAddress] = allowed;
          return true;  
    }


    function createAndDeposit(address sellerAddress, uint256 dueDateTimestamp, address _paymentToken, uint256 _amount) 
        public 
        condition(sellerAddress!=_msgSender(), "Error: Seller cannot be buyer")
        condition(dueDateTimestamp > block.timestamp, "Error: Invalid Due date")
        condition(allowedTokens[_paymentToken], "Error: Invalid payment token")
        condition(_amount > 0, "Error: Invalid amount")
         returns(bool)
    {
           totalOrders +=1;       
           Order storage order = orders[totalOrders];
           order.orderId = totalOrders;
           order.seller = sellerAddress;
           order.buyer = _msgSender();
           order.dueDate = dueDateTimestamp;
           order.paymentToken = _paymentToken;
           order.state = State.Pending;
           order.amount = _amount;
           order.fee = fee;
           order.createdAt = block.timestamp;
            
          IBEP20(_paymentToken).transferFrom(_msgSender(), address(this),_amount);
 
           emit OrderCreated(totalOrders);         
           return true;  
    }


     function markComplete(uint256 orderId)
        public
        condition((orders[orderId].buyer==_msgSender()||_msgSender()== owner()), "Error: Caller not buyer/owner")   
        condition(orders[orderId].state==State.Pending, "Error: Invalid current state")   
        returns (bool)     
    {
        Order storage order = orders[orderId];    
        order.state = State.Completed;
        order.completedAt = block.timestamp;

        emit OrderCompleted(orderId,_msgSender());

        return true;
     }
    
      function markCompleteAndreleaseFundsToSeller(uint256 orderId)
        public
        condition((orders[orderId].buyer==_msgSender()||_msgSender()== owner()), "Error: Caller not buyer/owner")   
        condition(orders[orderId].state==State.Pending, "Error: Invalid current state")   
     {
        Order storage order = orders[orderId];    
        order.completedAt = block.timestamp;
        order.releasedAt = block.timestamp;
        order.state = State.Released;
      
        emit OrderCompletedAndReleased(orderId,_msgSender());
        uint256 feeValue = order.amount * fee / 10**3;
        IBEP20(order.paymentToken).transfer(order.seller, order.amount - feeValue);
        IBEP20(order.paymentToken).transfer(owner(), feeValue );

      }


      function releaseFundsToBuyer(uint256 orderId)
        public
        condition((orders[orderId].seller==_msgSender()||_msgSender()== owner()), "Error: Caller not seller/owner")   
        condition(((orders[orderId].state!=State.Released)||(orders[orderId].state!=State.Reverted)), "Error: Invalid current state")   
     {
        Order storage order = orders[orderId];    
        order.releasedAt = block.timestamp;
        order.state = State.Reverted;
      
        emit OrderReverted(orderId,_msgSender());

        IBEP20(order.paymentToken).transfer(order.buyer, order.amount);
    }

       function claimFundsFromBuyer(uint256 orderId)
        public
        condition((orders[orderId].seller==_msgSender()||_msgSender()== owner()), "Error: Caller not seller/owner")   
        condition((orders[orderId].state==State.Completed || (orders[orderId].state!=State.Released && (orders[orderId].createdAt + (2 minutes) <= block.timestamp ))), "Error: Invalid current state")   
     {
        Order storage order = orders[orderId];    
        order.releasedAt = block.timestamp;
        order.state = State.Released;
      
        emit OrderCompletedAndReleased(orderId,_msgSender());
        uint256 feeValue = order.amount * fee / 10**3;

        IBEP20(order.paymentToken).transfer(order.buyer, order.amount - feeValue);
        IBEP20(order.paymentToken).transfer(owner(), feeValue);

    }
    
     function setTransactionFee(uint256 _newFee)
        public 
        condition(owner()==_msgSender(), "Error: Caller not owner")  
        returns (bool)
       {
           fee = _newFee;
           return true;
       }
       
    
    function orderDetails(uint256 orderId)
        public view
        condition((orders[orderId].seller==_msgSender()||_msgSender()== owner() || orders[orderId].buyer==_msgSender()), "Error: Caller not seller/buyer/owner")   
        returns (address buyer,address seller, address paymentToken, State state, uint256 dueDate, uint256 amount,uint256 fees, uint256 createdAt, uint256 releasedAt,uint256 completedAt)
      {
        Order memory order = orders[orderId];       
        return (order.buyer,order.seller, order.paymentToken,order.state,order.dueDate,order.amount, order.fee, order.createdAt,order.releasedAt,order.completedAt);
    }
}
